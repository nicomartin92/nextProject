// Media queries
@mixin smallMedium {
  @media (min-width: $width450) { @content; }
}
@mixin medium {
  @media (min-width: $width768) { @content; }
}
@mixin large {
  @media (min-width: $width1024) { @content; }
}
@mixin xlarge {
  @media (min-width: $width1440) { @content; }
}
@mixin xxlarge {
  @media (min-width: $width1600) { @content; }
}


// Buttons
@mixin button($color1, $color2) {
  background-color: transparent;
  margin-bottom: 0;
  text-align: center;
  white-space: nowrap;
  vertical-align: middle;
  touch-action: manipulation;
  cursor: pointer;
  background-image: none;
  border: 1px solid transparent;
  border-radius: rem(4px);
  margin: rem(7px 10px);
  padding: rem(10px 15px);
  text-transform: uppercase;
  overflow: hidden;
  display: block;
  color: $color1;
  position: relative;
  z-index: map-get($z-index, buttons);
  border-radius: 0;
  border: 2px solid $color1;
  transition: all 0.4s cubic-bezier(0.42, 0, 0.58, 1);
  display: flex;
  justify-content: center;

  @include medium {
    margin: rem(10px 10px);
  }

  input {
    display: none;

    &:checked + span {
      font-weight: bold;
      text-decoration: underline;
    }
  }

  &::before {
    display: block;
    position: absolute;
    top: 0;
    right: 0;
    height: 100%;
    width: 0;
    z-index: map-get($z-index, negatifIndex);
    content: '';
    color: $color1;
    background: $color1;
    transition: all 0.4s cubic-bezier(0.42, 0, 0.58, 1);
  }

  svg {
    transition: all 0.4s cubic-bezier(0.42, 0, 0.58, 1);
  }

  &:hover,
  &:focus {
    color: $color2;
    background-color: transparent;

    &::before {
      left: 0%;
      right: auto;
      width: 100%;
    }

    svg {
      fill: $color2;
    }
  }
}

@mixin buttonClose($width, $widthMobile, $color, $colorText) {
  position: relative;
  margin: auto;
  width: $widthMobile;
  cursor: pointer;
  background: none;
  border: none;

  @include large {
    width: $width;
  }

  &:hover {
    .inner {
      &::before,
      &::after {
        transform: rotate(0);
      }

      &::before {
        top: 0;
      }

      &::after {
        bottom: 0;
      }
    }
    
    label {
      opacity: 1;
    }
  }

  .inner {
    width: inherit;
    text-align: center;

    &::before,
    &::after {
      position: absolute;
      content: '';
      height: 1px;
      width: inherit;
      background: $color;
      left: 0;
      transition: all .3s ease-in;
    }

    &::before {
      top: 50%; 
      transform: rotate(45deg);  
    }

    &::after {  
      bottom: 50%;
      transform: rotate(-45deg);  
    }
  }

  label { 
    font-size: .8em; 
    line-height: 4em;
    text-transform: uppercase;
    color: $colorText;
    transition: all .3s ease-in;
    opacity: 0;
    cursor: pointer;
  }
}

// Input
@mixin inputCheckbox() {
  display: none;

  &:checked {
    & + label:before {
      background-color: $colorBlue;
      border-color: $colorBlue;
      color: $colorWhite;
    }
  }

  &:disabled {
    & + label:before {
      transform: scale(1);
    }
  }

  &:checked {
    &:disabled {
      & + label:before {
        transform: scale(1);
        background-color: #bfb;
        border-color: #bfb;
      }
    }
  }

  & + label {
    display: block;
    cursor: pointer;
    margin: rem(15px 0 15px);

    &:before {
      content: "\2714";
      border: 1px solid $colorGray04;
      display: inline-block;
      width: rem(15px);
      height: rem(15px);
      padding-left: rem(3px);
      padding-bottom: rem(3px);
      margin-right: rem(5px);
      vertical-align: bottom;
      color: transparent;
      transition: all .2s ease-in;

      &:active {
        transform: scale(0);
      }
    }
  }
}


// round
@mixin round($size, $colorBg, $color, $fontSize) {
  height: $size;
  width: $size;
  line-height: $size;
  border-radius: 0;
  border-width: 0;
  padding: 0;
  font-size: $fontSize;
  border-radius: $size;
  text-align: center;
  background: $colorBg;
  color: $color;
}


// Skew
@mixin skew($fontSize, $colorBg) {
  background: $colorBg;
  transform: skewX(-18deg);
  display: inline-block;
  padding: 2px $fontSize 4px;
  height: auto;
  color: $colorWhite;
  font-size: $fontSize;
}


// Aspect ratio
@mixin aspect-ratio($width, $height) {
  position: relative;
  overflow: hidden;
  &:after {
    display: block;
    content: "";
    width: 100%;
    padding-bottom: ($height / $width) * 100%;
  }
  .content {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;

    img {
      width: 100%;
    }
  }
}

@mixin fadeIn($dir,$offset,$timing,$cubic,) {

  opacity: 0;
  transition: transform $timing $timing/2 $cubic, opacity $timing $timing/2 $cubic;
  &.fadeIn {
    opacity: 1;
  }

  @if ($dir == 'left') {
    transform: translate3d(-$offset, 0, 0);
    &.fadeIn {
      transform: translate3d(0, 0, 0);
    }
  }

  @elseif ($dir == 'bottom') {
    transform: translate3d(0, $offset, 0);
    &.fadeIn {
      transform: translate3d(0, 0, 0);
    }
  }

  @elseif ($dir == 'top') {
    transform: translate3d(0, -$offset, 0);
    &.fadeIn {
      transform: translate3d(0, 0, 0);
    }
  }

  @elseif ($dir == 'right') {
    transform: translate3d($offset, 0, 0);
    &.fadeIn {
      transform: translate3d(0, 0, 0);
    }
  }
}

// .my-item { @include fadeIn('left', 20px, .5s, linear); }

@mixin loopDelay($n,$delay,) {

  @for $i from 1 through $n {
    &:nth-child(#{$i}) {
      transition-delay: $i * $delay * 1s;
    }  
  }
}

// .items { @include loopDelay(4, .1s); }

@mixin loopDelayRow($delay,$item-per-row,) {

  @for $i from 1 through $item-per-row {
    $end: #{$item-per-row}n - ($item-per-row - $i);
    &:nth-child(#{$end}) {
      transition-delay: $i * $delay * 1s;
    }
  }
}

// .items { @include loopDelay(.1s, 4); }


// Bullet points
@mixin bullet($left, $color) {
  position: absolute;
  top: rem(5px);
  left: $left;
  display: inline-block;
  width: rem(10px);
  height: rem(10px);
  background: $colorWhite;
  border: 1px solid $color;
  border-radius: 50%;
}

// Mixin animation


@mixin loopAnimationBottomTop($value, $time) {
  @keyframes card-in{
    0%{
      opacity: 0;
      top: $value;
    }
    100%{
      opacity: 1;
      top: 0;
    }
  }

  animation: card-in .5s linear;
  animation-fill-mode:forwards;
  animation-delay: $time;

  @for $i from 1 through 21 {
      &:nth-child(#{$i}){
        animation-delay: $i * 50ms;
      }
  }
}